/*
 * This file is generated by jOOQ.
 */
package ru.romangr.catbot.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.romangr.catbot.DefaultSchema;
import ru.romangr.catbot.Keys;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DelayedPost extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DELAYED_POST</code>
     */
    public static final DelayedPost DELAYED_POST = new DelayedPost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>DELAYED_POST.id</code>.
     */
    public final TableField<Record, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>DELAYED_POST.text</code>.
     */
    public final TableField<Record, String> TEXT = createField(DSL.name("text"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DELAYED_POST.document_id</code>.
     */
    public final TableField<Record, String> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DELAYED_POST.video_id</code>.
     */
    public final TableField<Record, String> VIDEO_ID = createField(DSL.name("video_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DELAYED_POST.photo_id</code>.
     */
    public final TableField<Record, String> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>DELAYED_POST.submitted</code>.
     */
    public final TableField<Record, LocalDateTime> SUBMITTED = createField(DSL.name("submitted"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "");

    private DelayedPost(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private DelayedPost(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>DELAYED_POST</code> table reference
     */
    public DelayedPost(String alias) {
        this(DSL.name(alias), DELAYED_POST);
    }

    /**
     * Create an aliased <code>DELAYED_POST</code> table reference
     */
    public DelayedPost(Name alias) {
        this(alias, DELAYED_POST);
    }

    /**
     * Create a <code>DELAYED_POST</code> table reference
     */
    public DelayedPost() {
        this(DSL.name("DELAYED_POST"), null);
    }

    public <O extends Record> DelayedPost(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, DELAYED_POST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.DELAYED_POST__;
    }

    @Override
    public DelayedPost as(String alias) {
        return new DelayedPost(DSL.name(alias), this);
    }

    @Override
    public DelayedPost as(Name alias) {
        return new DelayedPost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DelayedPost rename(String name) {
        return new DelayedPost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DelayedPost rename(Name name) {
        return new DelayedPost(name, null);
    }
}
